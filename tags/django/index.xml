<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on Ponte Posterum</title>
    <link>https://oglinuk.github.io/tags/django/</link>
    <description>Recent content in Django on Ponte Posterum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://oglinuk.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Web701 17</title>
      <link>https://oglinuk.github.io/post/web701-17/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-17/</guid>
      <description>Web Development 701 ~ Price Calculator In the previous blog we implememented the functionality around editing and updating the user profile. Now that we have completed that feature requirement for the assessment, now it&amp;rsquo;s time to implement another of the feature requirements; the price calculator.
To start we are going to create a new app called calculator to keep things cleaner and easier. We do this by django-admin startapp calculator.</description>
    </item>
    
    <item>
      <title>Web701 16</title>
      <link>https://oglinuk.github.io/post/web701-16/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-16/</guid>
      <description>Web Development 701 ~ Profile (editing) Last blog covered extending the user model of Django to add additional fields and then implementing a profile page. In this blog we are going to cover editing and updating the profile information. The first thing to do is to add the following to the urlpatterns variable in the urls.py file.
path(&#39;edit_profile&#39;, views.edit_profile, name=&#39;edit_profile&#39;)  Next to create the edit_profile view in the views.</description>
    </item>
    
    <item>
      <title>Web701 15</title>
      <link>https://oglinuk.github.io/post/web701-15/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-15/</guid>
      <description>Web Development 701 ~ Profile In the previous blog we implemented the registration functionality. Now to add additional fields when registering and a profile page for users. In this blog we are going to explore extending the user model. The first thing we need to do is to create a new class in the models.py file in our authentication app. To this file we are going to add the following code.</description>
    </item>
    
    <item>
      <title>Web701 14</title>
      <link>https://oglinuk.github.io/post/web701-14/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-14/</guid>
      <description>Web Development 701 ~ Registration In the previous blog we covered the basic implementation of authentication using the built-in authentication system of Django. In this blog we are going to cover how to handle user registration. The first thing to do is to add the following line to the urls.py file under our authentication app.
path(&#39;register&#39;, views.register, name=&#39;register&#39;)  Now to create the corresponding view in the views.py file.</description>
    </item>
    
    <item>
      <title>Web701 13</title>
      <link>https://oglinuk.github.io/post/web701-13/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-13/</guid>
      <description>Web Development 701 ~ Authentication In this blog post we are going to cover the implementation of user authentication. First thing to do is to create a new app via python3 manage.py startapp authentication. Next we need to run python3 manage.py migrate. Then we need to create a super user via python3 manage.py createsuperuser. Now we need to add authentication to the INSTALLED_APPS list in the settings.py file. Once that is done we can start to add the authentication functionality.</description>
    </item>
    
    <item>
      <title>Web701 12</title>
      <link>https://oglinuk.github.io/post/web701-12/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-12/</guid>
      <description>Web Development 701 ~ Assessment 2 Milestone 3 Since I have completed milestone&amp;rsquo;s 1 and 2 for assessment 2 of web701, I am going to start milestone 3 (building the proposed website). I have chosen to use Django since Django is more suitable for a production environment than Flask. Originally I was going to use Django-cms, but quickly found that it would not be as easy to implement some of the features required for the milestone.</description>
    </item>
    
    <item>
      <title>Web701 6</title>
      <link>https://oglinuk.github.io/post/web701-6/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-6/</guid>
      <description>Web Development 701 ~ Django-cms, Wagtail &amp;amp; Odoo Last blog I didn&amp;rsquo;t really go into much detail around getting the Django based CMSs or Odoo installed/running. This blog is going to cover those in more detail. To recap, as stated in the previous blog, I have no experience with Django but do have some with Odoo. The reason I am working with Django and not the framework I&amp;rsquo;ve been using (Flask) is because Django is a fullstack framwork, where Flask is only a microframework.</description>
    </item>
    
  </channel>
</rss>