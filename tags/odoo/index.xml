<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Odoo on Ponte Posterum</title>
    <link>https://oglinuk.github.io/tags/odoo/</link>
    <description>Recent content in Odoo on Ponte Posterum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://oglinuk.github.io/tags/odoo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Web701 6</title>
      <link>https://oglinuk.github.io/post/web701-6/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-6/</guid>
      <description>Web Development 701 ~ Django-cms, Wagtail &amp;amp; Odoo Last blog I didn&amp;rsquo;t really go into much detail around getting the Django based CMSs or Odoo installed/running. This blog is going to cover those in more detail. To recap, as stated in the previous blog, I have no experience with Django but do have some with Odoo. The reason I am working with Django and not the framework I&amp;rsquo;ve been using (Flask) is because Django is a fullstack framwork, where Flask is only a microframework.</description>
    </item>
    
    <item>
      <title>Prj701 10 ~ Creating an Odoo Module</title>
      <link>https://oglinuk.github.io/post/prj701-10/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-10/</guid>
      <description>PRJ701 - Creating an Odoo Module One of the most powerful things that Odoo brings is the fact that it is open-source. This allows developers like myself to extend the existing structure to fit any use case. To make it even better, Odoo has taken it a step further and provided a built in way to generating the skeleton of an entirely new module. This is done via the scaffold flag when executing odoo-bin.</description>
    </item>
    
    <item>
      <title>Prj701 9 ~ Sales Module</title>
      <link>https://oglinuk.github.io/post/prj701-9/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-9/</guid>
      <description>Project 701 ~ Sales Module Since the module to be developed involves the sales module, I will be dedicating a blog to exploring the various components that make up the module. For me to better understand what it is I am manipulating or changing I will go through the processes that the sales module provides; half the battle is understanding how it all comes together. One of the resources available to me is the Odoo training center, which contains various tutorials on the different modules, including one for sales.</description>
    </item>
    
    <item>
      <title>Prj701 8 - Setting Up Odoo</title>
      <link>https://oglinuk.github.io/post/prj701-8/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-8/</guid>
      <description>Project 701 ~ Setting Up Odoo The first thing I need to do is to ssh into the linux virtual machine that I created on Azure and install a few dependancies. Before I do that I will start with a simple sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade. Now to install the following dependancies; git python3.5 python3.5-dev virtualenv vim postgresql xz-utils wget fontconfig libfreetype6 libx11-6 libxext6 libxrender1 node-less node-clean-css xfonts-75dpi libxml2-dev libxslt1-dev libevent-dev libsasl2-dev libssl1.</description>
    </item>
    
    <item>
      <title>Prj701 7 ~ Sales Order XML Parse</title>
      <link>https://oglinuk.github.io/post/prj701-7/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-7/</guid>
      <description>Project 702 ~ Sales Order XML Parse One of the stages in the project is to create a module which provides the functionality of automatically generating a sales order based on the values from an XML file retrived from an FTP server. Before I create a module I am going to create a test-driven example using the standard library ftplib which provides an FTP client, containing the functions (nlist and retrbinary) that are necessary.</description>
    </item>
    
    <item>
      <title>Prj701 6 ~ Vim</title>
      <link>https://oglinuk.github.io/post/prj701-6/</link>
      <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-6/</guid>
      <description>Project 701 ~ Vim I am sure if you have heard of vim then you probably haven&amp;rsquo;t heard good things. I mean hell there are jokes about just exiting vim. Vim (Vi IMproved) is a clone of the vi text editor made by Bill Joy for Unix. When I was first exposed to a text editor (nano) I wasn&amp;rsquo;t very fond of it. It didn&amp;rsquo;t make sense why I would use a text editor over what I was currently using at the time (atom).</description>
    </item>
    
    <item>
      <title>Prj701 2 ~ Azure</title>
      <link>https://oglinuk.github.io/post/prj701-2/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-2/</guid>
      <description>Project 701 ~ Azure Part of the stack that is being used for this project is Azure. I am not a fan of microsoft so my opinion on anything to do with them is not positive. This is the cloud provider that Krupesh has chosen to go with however, so I will learn it anyway. Azure (like most cloud providers) gives 200 credits which are only valid for 30 days (GCP and AWS are both a year).</description>
    </item>
    
    <item>
      <title>Prj701 0 ~ Odoo ~ Venus Informatics</title>
      <link>https://oglinuk.github.io/post/prj701-0/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-0/</guid>
      <description>Project 701 ~ Odoo ~ Venus Informatics My 3rd year project proposal started to form without me really knowing it during my first year DAT501(database) class, which at the time was taught by my now best friend Krupesh Desai. At the time Krupesh was working at the NMDHB(Nelson Marlborough District Health Board) on a solution to merge all of the DHB&amp;rsquo;s throughout New Zealand onto one platform. Around May the following year I had met Krupesh again at an ITP (IT Professionals) meeting where I asked him a question on feasability of a malware detecting AI.</description>
    </item>
    
  </channel>
</rss>