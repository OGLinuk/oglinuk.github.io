<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Ponte Posterum</title>
    <link>https://oglinuk.github.io/tags/python/</link>
    <description>Recent content in Python on Ponte Posterum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://oglinuk.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PTP</title>
      <link>https://oglinuk.github.io/project/ptp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/project/ptp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Web701 22</title>
      <link>https://oglinuk.github.io/post/web701-22/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-22/</guid>
      <description>Web Development 701 ~ Deploying with Digital Ocean Now that we have built the function, which was covered in the last post, it&amp;rsquo;s time to deploy it. For deployment we will be using digital ocean for a couple of reasons. First it&amp;rsquo;s much easier than setting up instances in the larger cloud providers like GCP, AWS, or Azure. Second digital ocean has an OpenFaas one-click droplet.
The first thing to do is to ssh into the droplet via ssh root@&amp;lt;IP address&amp;gt;.</description>
    </item>
    
    <item>
      <title>Web701 21</title>
      <link>https://oglinuk.github.io/post/web701-21/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-21/</guid>
      <description>Web Development 701 ~ OpenFaas ~ Creating a Function With assessment 2 finished now it&amp;rsquo;s time to focus back on assessment 3, which serverless via OpenFaas. In this blog I am going to create the function, and it will be with a program I&amp;rsquo;ve already made; sbh. The first thing to do is create a new directory to store the code in, this will be done via mkdir web701.</description>
    </item>
    
    <item>
      <title>Web701 20</title>
      <link>https://oglinuk.github.io/post/web701-20/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-20/</guid>
      <description>Web Development 701 ~ Heroku and Web Hosting We wrapped up the web implementation in the last blog with the addition of the auction system. Now it&amp;rsquo;s time to deploy the website to a web hosting service. There are two options that are available for the deployment, my tutors remote server, or a PaaS (Platform as a Service) provider like Heroku.
I want to get experience in both so I will deploy on both, but since the dependancies I require for the website are not yet installed on the tutor&amp;rsquo;s server I will start with deploying on Heroku.</description>
    </item>
    
    <item>
      <title>Web701 19</title>
      <link>https://oglinuk.github.io/post/web701-19/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-19/</guid>
      <description>Web Development 701 ~ Auction System (cont.) In the last blog we covered authentication with the TradeMe API. After some playing around, I hit a wall with the list an item API method. Instead of wasting time trying to figure it out I am going to implement a simple dummy auction system. This is partly because I&amp;rsquo;d rather have something for an auction system than nothing and also partly because I have more important projects to work on.</description>
    </item>
    
    <item>
      <title>Web701 18</title>
      <link>https://oglinuk.github.io/post/web701-18/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-18/</guid>
      <description>Web Development 701 ~ Auction System With the authentication and calculator finished its now time to implement the auction system. For this feature I am going to be implementing it using the TradeMe API. This is partially because there is no existing auction extension in django and partially because I love API&amp;rsquo;s and this is a perfect opportunity to get experience integrating one.
The first thing to do is to head over and read the registering an application section.</description>
    </item>
    
    <item>
      <title>Web701 17</title>
      <link>https://oglinuk.github.io/post/web701-17/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-17/</guid>
      <description>Web Development 701 ~ Price Calculator In the previous blog we implememented the functionality around editing and updating the user profile. Now that we have completed that feature requirement for the assessment, now it&amp;rsquo;s time to implement another of the feature requirements; the price calculator.
To start we are going to create a new app called calculator to keep things cleaner and easier. We do this by django-admin startapp calculator.</description>
    </item>
    
    <item>
      <title>Web701 16</title>
      <link>https://oglinuk.github.io/post/web701-16/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-16/</guid>
      <description>Web Development 701 ~ Profile (editing) Last blog covered extending the user model of Django to add additional fields and then implementing a profile page. In this blog we are going to cover editing and updating the profile information. The first thing to do is to add the following to the urlpatterns variable in the urls.py file.
path(&#39;edit_profile&#39;, views.edit_profile, name=&#39;edit_profile&#39;)  Next to create the edit_profile view in the views.</description>
    </item>
    
    <item>
      <title>Web701 15</title>
      <link>https://oglinuk.github.io/post/web701-15/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-15/</guid>
      <description>Web Development 701 ~ Profile In the previous blog we implemented the registration functionality. Now to add additional fields when registering and a profile page for users. In this blog we are going to explore extending the user model. The first thing we need to do is to create a new class in the models.py file in our authentication app. To this file we are going to add the following code.</description>
    </item>
    
    <item>
      <title>Web701 14</title>
      <link>https://oglinuk.github.io/post/web701-14/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-14/</guid>
      <description>Web Development 701 ~ Registration In the previous blog we covered the basic implementation of authentication using the built-in authentication system of Django. In this blog we are going to cover how to handle user registration. The first thing to do is to add the following line to the urls.py file under our authentication app.
path(&#39;register&#39;, views.register, name=&#39;register&#39;)  Now to create the corresponding view in the views.py file.</description>
    </item>
    
    <item>
      <title>Docker 2</title>
      <link>https://oglinuk.github.io/post/docker-2/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/docker-2/</guid>
      <description>Docker-compose ~ container_name For my SDV701 assessment 2 we have to build a tiered software. I&amp;rsquo;ve decided to use Flask for the presentation tier, Flask-restful for the logic tier, and mongodb (via pymongo) for the data tier. I&amp;rsquo;ve also decided to use docker and docker-compose since running a mongodb server in docker is as easy as pulling an image from docker-hub. Below is a snippet from the docker-compose.yml file, showing how easy it is.</description>
    </item>
    
    <item>
      <title>Web701 13</title>
      <link>https://oglinuk.github.io/post/web701-13/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-13/</guid>
      <description>Web Development 701 ~ Authentication In this blog post we are going to cover the implementation of user authentication. First thing to do is to create a new app via python3 manage.py startapp authentication. Next we need to run python3 manage.py migrate. Then we need to create a super user via python3 manage.py createsuperuser. Now we need to add authentication to the INSTALLED_APPS list in the settings.py file. Once that is done we can start to add the authentication functionality.</description>
    </item>
    
    <item>
      <title>Web701 12</title>
      <link>https://oglinuk.github.io/post/web701-12/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-12/</guid>
      <description>Web Development 701 ~ Assessment 2 Milestone 3 Since I have completed milestone&amp;rsquo;s 1 and 2 for assessment 2 of web701, I am going to start milestone 3 (building the proposed website). I have chosen to use Django since Django is more suitable for a production environment than Flask. Originally I was going to use Django-cms, but quickly found that it would not be as easy to implement some of the features required for the milestone.</description>
    </item>
    
    <item>
      <title>Web701 11</title>
      <link>https://oglinuk.github.io/post/web701-11/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-11/</guid>
      <description>Web Development 701 ~ OpenFaas ~ Lab 4 In this blog we are going to go through lab 4 which goes into more depth around functions.
The first part of the lab covers configuration injection with environment variables. There are two ways of doing so; at deployment time and using query string and HTTP headers. Environment variables at deployment time are covered in lab 3 when working with write_debug, which is where the environment variable is added to the YAML file.</description>
    </item>
    
    <item>
      <title>Docker 1</title>
      <link>https://oglinuk.github.io/post/docker-1/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/docker-1/</guid>
      <description>Docker-compose In this blog we are going to explore a tool thats apart of the docker ecosystem; docker-compose. &amp;ldquo;Compose is a tool for defining and running multi-container Docker applications.&amp;rdquo; [source] There is an awesome example found on the getting started section, which shows the power of docker-compose. The example is shown below.
app.py
import time import redis from flask import Flask app = Flask(__name__) cache = redis.Redis(host=&#39;redis&#39;, port=6379) def get_hit_count(): retries = 5 while True: try: return cache.</description>
    </item>
    
    <item>
      <title>Web701 10</title>
      <link>https://oglinuk.github.io/post/web701-10/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-10/</guid>
      <description>Web Development 701 ~ OpenFaas Continued ~ Lab 3 In this blog we are going to explore the OpenFaas workshop. Since we already have OpenFaas deployed and running from the previous blog, we are going to skip to lab 3; introduction to functions. OpenFaas provides two ways of creating a new function; using a template, or using an existing binary. I dont have a binary to use, so I am going to be using a template.</description>
    </item>
    
    <item>
      <title>Docker 0</title>
      <link>https://oglinuk.github.io/post/docker-0/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/docker-0/</guid>
      <description>Docker Back in 2017 I learned about a ton of new and exciting technologies that I had never used or even heard of. One of those technologies is docker. If you don&amp;rsquo;t know of docker, then let me give some background information. &amp;ldquo;Docker is an open platform for developing, shipping, and running applications.&amp;rdquo; [source]. Before we can dive further into what this really means we need to first come to an understanding of containerization.</description>
    </item>
    
    <item>
      <title>Inotebook</title>
      <link>https://oglinuk.github.io/post/inotebook/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/inotebook/</guid>
      <description>I(llusionists) Notebook If you have seen the Prestige, then this program will look familiar. Inotebook is a personal notebook that is encrypted with the vigenere cipher. A vigenere cipher is similar to a caesar cipher (where characters are shifted by a certain offset), but the vigenere cipher uses a key to determine the offset rather than a number. The key is repeated to the length of the message, then each character of the message is offset by the character of the key.</description>
    </item>
    
    <item>
      <title>Prj701 10 ~ Creating an Odoo Module</title>
      <link>https://oglinuk.github.io/post/prj701-10/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-10/</guid>
      <description>PRJ701 - Creating an Odoo Module One of the most powerful things that Odoo brings is the fact that it is open-source. This allows developers like myself to extend the existing structure to fit any use case. To make it even better, Odoo has taken it a step further and provided a built in way to generating the skeleton of an entirely new module. This is done via the scaffold flag when executing odoo-bin.</description>
    </item>
    
    <item>
      <title>Prj701 9 ~ Sales Module</title>
      <link>https://oglinuk.github.io/post/prj701-9/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-9/</guid>
      <description>Project 701 ~ Sales Module Since the module to be developed involves the sales module, I will be dedicating a blog to exploring the various components that make up the module. For me to better understand what it is I am manipulating or changing I will go through the processes that the sales module provides; half the battle is understanding how it all comes together. One of the resources available to me is the Odoo training center, which contains various tutorials on the different modules, including one for sales.</description>
    </item>
    
    <item>
      <title>Prj701 8 - Setting Up Odoo</title>
      <link>https://oglinuk.github.io/post/prj701-8/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-8/</guid>
      <description>Project 701 ~ Setting Up Odoo The first thing I need to do is to ssh into the linux virtual machine that I created on Azure and install a few dependancies. Before I do that I will start with a simple sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade. Now to install the following dependancies; git python3.5 python3.5-dev virtualenv vim postgresql xz-utils wget fontconfig libfreetype6 libx11-6 libxext6 libxrender1 node-less node-clean-css xfonts-75dpi libxml2-dev libxslt1-dev libevent-dev libsasl2-dev libssl1.</description>
    </item>
    
    <item>
      <title>Prj701 7 ~ Sales Order XML Parse</title>
      <link>https://oglinuk.github.io/post/prj701-7/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-7/</guid>
      <description>Project 702 ~ Sales Order XML Parse One of the stages in the project is to create a module which provides the functionality of automatically generating a sales order based on the values from an XML file retrived from an FTP server. Before I create a module I am going to create a test-driven example using the standard library ftplib which provides an FTP client, containing the functions (nlist and retrbinary) that are necessary.</description>
    </item>
    
    <item>
      <title>Prj701 6 ~ Vim</title>
      <link>https://oglinuk.github.io/post/prj701-6/</link>
      <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-6/</guid>
      <description>Project 701 ~ Vim I am sure if you have heard of vim then you probably haven&amp;rsquo;t heard good things. I mean hell there are jokes about just exiting vim. Vim (Vi IMproved) is a clone of the vi text editor made by Bill Joy for Unix. When I was first exposed to a text editor (nano) I wasn&amp;rsquo;t very fond of it. It didn&amp;rsquo;t make sense why I would use a text editor over what I was currently using at the time (atom).</description>
    </item>
    
    <item>
      <title>Prj701 4 ~ XML</title>
      <link>https://oglinuk.github.io/post/prj701-4/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-4/</guid>
      <description>Project 701 ~ XML (Extensive Markup Language) I&amp;rsquo;m personally not a fan of XML as I feel it can get to complicated and cluttered, although I do come from a bias of JSON. Even so again this is what I have to learn, so learn I shall. XML to me is just HTML but with more tags so picking up XML shouldn&amp;rsquo;t be too difficult. For anything I normally look for documentation or blogs with examples.</description>
    </item>
    
    <item>
      <title>Prj701 3 - PostgreSQL</title>
      <link>https://oglinuk.github.io/post/prj701-3/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-3/</guid>
      <description>Project 701 ~ PostgreSQL PostgreSQL is an open source, no-sql (object-relational) database (ORDBMS) which is the db Odoo is built upon. I only have experience with MySQL which is entirely different since, its MySQL relation database management system (RDBMS). I&amp;rsquo;ve never actually used or played around with Postgres so I will be utilizing an awesome blog I found (via quick duckduckgo(ddg) search) which is by the Nanyang Technological University. This blog contains 6 sections with great snippets of quick refence information (I purposely left out the section about PHP cause don&amp;rsquo;t touch that stuff with a 20ft pole).</description>
    </item>
    
    <item>
      <title>Prj701 2 ~ Azure</title>
      <link>https://oglinuk.github.io/post/prj701-2/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-2/</guid>
      <description>Project 701 ~ Azure Part of the stack that is being used for this project is Azure. I am not a fan of microsoft so my opinion on anything to do with them is not positive. This is the cloud provider that Krupesh has chosen to go with however, so I will learn it anyway. Azure (like most cloud providers) gives 200 credits which are only valid for 30 days (GCP and AWS are both a year).</description>
    </item>
    
    <item>
      <title>Prj701 1 ~ Python(3)</title>
      <link>https://oglinuk.github.io/post/prj701-1/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-1/</guid>
      <description>Project 701 ~ Python (3) I attended a Python meetup group in May 18th 2017. Krupesh was giving a presentation on Python and what it is capable of. The day after this meeting I decided I was going to start learning Python. The first thing I did was make a file containing the basic syntax of the Python programming language. This would become the foundation for what I know today.</description>
    </item>
    
    <item>
      <title>Prj701 0 ~ Odoo ~ Venus Informatics</title>
      <link>https://oglinuk.github.io/post/prj701-0/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/prj701-0/</guid>
      <description>Project 701 ~ Odoo ~ Venus Informatics My 3rd year project proposal started to form without me really knowing it during my first year DAT501(database) class, which at the time was taught by my now best friend Krupesh Desai. At the time Krupesh was working at the NMDHB(Nelson Marlborough District Health Board) on a solution to merge all of the DHB&amp;rsquo;s throughout New Zealand onto one platform. Around May the following year I had met Krupesh again at an ITP (IT Professionals) meeting where I asked him a question on feasability of a malware detecting AI.</description>
    </item>
    
  </channel>
</rss>