<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Ponte Posterum</title>
    <link>https://oglinuk.github.io/tags/docker/</link>
    <description>Recent content in Docker on Ponte Posterum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://oglinuk.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PTP</title>
      <link>https://oglinuk.github.io/project/ptp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/project/ptp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker 1</title>
      <link>https://oglinuk.github.io/post/docker-1/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/docker-1/</guid>
      <description>Docker-compose In this blog we are going to explore a tool thats apart of the docker ecosystem; docker-compose. &amp;ldquo;Compose is a tool for defining and running multi-container Docker applications.&amp;rdquo; [source] There is an awesome example found on the getting started section, which shows the power of docker-compose. The example is shown below.
app.py
import time import redis from flask import Flask app = Flask(__name__) cache = redis.Redis(host=&#39;redis&#39;, port=6379) def get_hit_count(): retries = 5 while True: try: return cache.</description>
    </item>
    
    <item>
      <title>Docker 0</title>
      <link>https://oglinuk.github.io/post/docker-0/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/docker-0/</guid>
      <description>Docker Back in 2017 I learned about a ton of new and exciting technologies that I had never used or even heard of. One of those technologies is docker. If you don&amp;rsquo;t know of docker, then let me give some background information. &amp;ldquo;Docker is an open platform for developing, shipping, and running applications.&amp;rdquo; [source]. Before we can dive further into what this really means we need to first come to an understanding of containerization.</description>
    </item>
    
    <item>
      <title>Web701 9</title>
      <link>https://oglinuk.github.io/post/web701-9/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-9/</guid>
      <description>Web Development 701 ~ Serverless Continued As stated in the previous blog, the first exposure to serverless was OpenFaaS. Whether its because of bias of the first exposure or because of bias towards docker, I am going to be using OpenFaaS for the serverless implementation of assessment three.</description>
    </item>
    
    <item>
      <title>Web701 8</title>
      <link>https://oglinuk.github.io/post/web701-8/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-8/</guid>
      <description>Web Development 701 ~ Serverless For the third assessment we are to choose a web technology to research and implement. It has to be web related, so one of the things that came up when discussing with my tutor was exploring serverless architectures. I have been exposed to serverless before when I was browsing through /r/opensource and came across OpenFaaS. Before we dive any deeper lets come to an understanding of what we really mean when we are talking about serverless.</description>
    </item>
    
    <item>
      <title>Web701 7</title>
      <link>https://oglinuk.github.io/post/web701-7/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-7/</guid>
      <description>Web Development 701 ~ Web Hosting This blog is going to cover web hosting, to make the website publicly available to the outside world. I don&amp;rsquo;t really know much about web hosting, nor do I care to go into much detail since this is something that a web developer needs to know. As I stated in the web security blog, I have little interest in web development. That being said hosting the website is something that our tutor wants us to get some experience with so here I am writing a blog about it.</description>
    </item>
    
    <item>
      <title>Web701 6</title>
      <link>https://oglinuk.github.io/post/web701-6/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-6/</guid>
      <description>Web Development 701 ~ Django-cms, Wagtail &amp;amp; Odoo Last blog I didn&amp;rsquo;t really go into much detail around getting the Django based CMSs or Odoo installed/running. This blog is going to cover those in more detail. To recap, as stated in the previous blog, I have no experience with Django but do have some with Odoo. The reason I am working with Django and not the framework I&amp;rsquo;ve been using (Flask) is because Django is a fullstack framwork, where Flask is only a microframework.</description>
    </item>
    
    <item>
      <title>Web701 5</title>
      <link>https://oglinuk.github.io/post/web701-5/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-5/</guid>
      <description>Web Development 701 ~ Virtual Machines and Docker Class was mainly reviewing the mock projects, so this blog is going to be dedicated to the virtual machines that I use on virtualbox. For the second milestone we have to describe three frameworks, two of which were prompted in class; laravel (PHP), and meteor (NodeJS). Its times like these that I am thankful for virtual machines. Im not sure how difficult these were to install and get running on windows machines and I dont care to.</description>
    </item>
    
  </channel>
</rss>