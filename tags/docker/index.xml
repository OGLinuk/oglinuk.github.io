<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Ponte Posterum</title>
    <link>https://oglinuk.github.io/tags/docker/</link>
    <description>Recent content in Docker on Ponte Posterum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://oglinuk.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PTP</title>
      <link>https://oglinuk.github.io/project/ptp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/project/ptp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Web701 22</title>
      <link>https://oglinuk.github.io/post/web701-22/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-22/</guid>
      <description>Web Development 701 ~ Deploying with Digital Ocean Now that we have built the function, which was covered in the last post, it&amp;rsquo;s time to deploy it. For deployment we will be using digital ocean for a couple of reasons. First it&amp;rsquo;s much easier than setting up instances in the larger cloud providers like GCP, AWS, or Azure. Second digital ocean has an OpenFaas one-click droplet.
The first thing to do is to ssh into the droplet via ssh root@&amp;lt;IP address&amp;gt;.</description>
    </item>
    
    <item>
      <title>Web701 21</title>
      <link>https://oglinuk.github.io/post/web701-21/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-21/</guid>
      <description>Web Development 701 ~ OpenFaas ~ Creating a Function With assessment 2 finished now it&amp;rsquo;s time to focus back on assessment 3, which serverless via OpenFaas. In this blog I am going to create the function, and it will be with a program I&amp;rsquo;ve already made; sbh. The first thing to do is create a new directory to store the code in, this will be done via mkdir web701.</description>
    </item>
    
    <item>
      <title>Docker 2</title>
      <link>https://oglinuk.github.io/post/docker-2/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/docker-2/</guid>
      <description>Docker-compose ~ container_name For my SDV701 assessment 2 we have to build a tiered software. I&amp;rsquo;ve decided to use Flask for the presentation tier, Flask-restful for the logic tier, and mongodb (via pymongo) for the data tier. I&amp;rsquo;ve also decided to use docker and docker-compose since running a mongodb server in docker is as easy as pulling an image from docker-hub. Below is a snippet from the docker-compose.yml file, showing how easy it is.</description>
    </item>
    
    <item>
      <title>Web701 11</title>
      <link>https://oglinuk.github.io/post/web701-11/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-11/</guid>
      <description>Web Development 701 ~ OpenFaas ~ Lab 4 In this blog we are going to go through lab 4 which goes into more depth around functions.
The first part of the lab covers configuration injection with environment variables. There are two ways of doing so; at deployment time and using query string and HTTP headers. Environment variables at deployment time are covered in lab 3 when working with write_debug, which is where the environment variable is added to the YAML file.</description>
    </item>
    
    <item>
      <title>Docker 1</title>
      <link>https://oglinuk.github.io/post/docker-1/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/docker-1/</guid>
      <description>Docker-compose In this blog we are going to explore a tool thats apart of the docker ecosystem; docker-compose. &amp;ldquo;Compose is a tool for defining and running multi-container Docker applications.&amp;rdquo; [source] There is an awesome example found on the getting started section, which shows the power of docker-compose. The example is shown below.
app.py
import time import redis from flask import Flask app = Flask(__name__) cache = redis.Redis(host=&#39;redis&#39;, port=6379) def get_hit_count(): retries = 5 while True: try: return cache.</description>
    </item>
    
    <item>
      <title>Web701 10</title>
      <link>https://oglinuk.github.io/post/web701-10/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-10/</guid>
      <description>Web Development 701 ~ OpenFaas Continued ~ Lab 3 In this blog we are going to explore the OpenFaas workshop. Since we already have OpenFaas deployed and running from the previous blog, we are going to skip to lab 3; introduction to functions. OpenFaas provides two ways of creating a new function; using a template, or using an existing binary. I dont have a binary to use, so I am going to be using a template.</description>
    </item>
    
    <item>
      <title>Docker 0</title>
      <link>https://oglinuk.github.io/post/docker-0/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/docker-0/</guid>
      <description>Docker Back in 2017 I learned about a ton of new and exciting technologies that I had never used or even heard of. One of those technologies is docker. If you don&amp;rsquo;t know of docker, then let me give some background information. &amp;ldquo;Docker is an open platform for developing, shipping, and running applications.&amp;rdquo; [source]. Before we can dive further into what this really means we need to first come to an understanding of containerization.</description>
    </item>
    
    <item>
      <title>Web701 9</title>
      <link>https://oglinuk.github.io/post/web701-9/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-9/</guid>
      <description>Web Development 701 ~ OpenFaas As stated in the previous blog, the first exposure to serverless was OpenFaaS. Whether its because of bias of the first exposure or because of bias towards docker, I am going to be exploring OpenFaaS for the serverless implementation of assessment three. First thing to do like anything is to head to the documentation section. &amp;ldquo;OpenFaaS (Functions as a Service) is a framework for building serverless functions with Docker and Kubernetes which has first class support for metrics.</description>
    </item>
    
    <item>
      <title>Web701 6</title>
      <link>https://oglinuk.github.io/post/web701-6/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-6/</guid>
      <description>Web Development 701 ~ Django-cms, Wagtail &amp;amp; Odoo Last blog I didn&amp;rsquo;t really go into much detail around getting the Django based CMSs or Odoo installed/running. This blog is going to cover those in more detail. To recap, as stated in the previous blog, I have no experience with Django but do have some with Odoo. The reason I am working with Django and not the framework I&amp;rsquo;ve been using (Flask) is because Django is a fullstack framwork, where Flask is only a microframework.</description>
    </item>
    
    <item>
      <title>Web701 5</title>
      <link>https://oglinuk.github.io/post/web701-5/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-5/</guid>
      <description>Web Development 701 ~ Virtual Machines and Docker Class was mainly reviewing the mock projects, so this blog is going to be dedicated to the virtual machines that I use on virtualbox. For the second milestone we have to describe three frameworks, two of which were prompted in class; laravel (PHP), and meteor (NodeJS). Its times like these that I am thankful for virtual machines. Im not sure how difficult these were to install and get running on windows machines and I dont care to.</description>
    </item>
    
  </channel>
</rss>