<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web701 on Ponte Posterum</title>
    <link>https://oglinuk.github.io/tags/web701/</link>
    <description>Recent content in Web701 on Ponte Posterum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://oglinuk.github.io/tags/web701/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Web701 22</title>
      <link>https://oglinuk.github.io/post/web701-22/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-22/</guid>
      <description>Web Development 701 ~ Deploying with Digital Ocean Now that we have built the function, which was covered in the last post, it&amp;rsquo;s time to deploy it. For deployment we will be using digital ocean for a couple of reasons. First it&amp;rsquo;s much easier than setting up instances in the larger cloud providers like GCP, AWS, or Azure. Second digital ocean has an OpenFaas one-click droplet.
The first thing to do is to ssh into the droplet via ssh root@&amp;lt;IP address&amp;gt;.</description>
    </item>
    
    <item>
      <title>Web701 21</title>
      <link>https://oglinuk.github.io/post/web701-21/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-21/</guid>
      <description>Web Development 701 ~ OpenFaas ~ Creating a Function With assessment 2 finished now it&amp;rsquo;s time to focus back on assessment 3, which serverless via OpenFaas. In this blog I am going to create the function, and it will be with a program I&amp;rsquo;ve already made; sbh. The first thing to do is create a new directory to store the code in, this will be done via mkdir web701.</description>
    </item>
    
    <item>
      <title>Web701 20</title>
      <link>https://oglinuk.github.io/post/web701-20/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-20/</guid>
      <description>Web Development 701 ~ Heroku and Web Hosting We wrapped up the web implementation in the last blog with the addition of the auction system. Now it&amp;rsquo;s time to deploy the website to a web hosting service. There are two options that are available for the deployment, my tutors remote server, or a PaaS (Platform as a Service) provider like Heroku.
I want to get experience in both so I will deploy on both, but since the dependancies I require for the website are not yet installed on the tutor&amp;rsquo;s server I will start with deploying on Heroku.</description>
    </item>
    
    <item>
      <title>Web701 19</title>
      <link>https://oglinuk.github.io/post/web701-19/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-19/</guid>
      <description>Web Development 701 ~ Auction System (cont.) In the last blog we covered authentication with the TradeMe API. After some playing around, I hit a wall with the list an item API method. Instead of wasting time trying to figure it out I am going to implement a simple dummy auction system. This is partly because I&amp;rsquo;d rather have something for an auction system than nothing and also partly because I have more important projects to work on.</description>
    </item>
    
    <item>
      <title>Web701 18</title>
      <link>https://oglinuk.github.io/post/web701-18/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-18/</guid>
      <description>Web Development 701 ~ Auction System With the authentication and calculator finished its now time to implement the auction system. For this feature I am going to be implementing it using the TradeMe API. This is partially because there is no existing auction extension in django and partially because I love API&amp;rsquo;s and this is a perfect opportunity to get experience integrating one.
The first thing to do is to head over and read the registering an application section.</description>
    </item>
    
    <item>
      <title>Web701 17</title>
      <link>https://oglinuk.github.io/post/web701-17/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-17/</guid>
      <description>Web Development 701 ~ Price Calculator In the previous blog we implememented the functionality around editing and updating the user profile. Now that we have completed that feature requirement for the assessment, now it&amp;rsquo;s time to implement another of the feature requirements; the price calculator.
To start we are going to create a new app called calculator to keep things cleaner and easier. We do this by django-admin startapp calculator.</description>
    </item>
    
    <item>
      <title>Web701 16</title>
      <link>https://oglinuk.github.io/post/web701-16/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-16/</guid>
      <description>Web Development 701 ~ Profile (editing) Last blog covered extending the user model of Django to add additional fields and then implementing a profile page. In this blog we are going to cover editing and updating the profile information. The first thing to do is to add the following to the urlpatterns variable in the urls.py file.
path(&#39;edit_profile&#39;, views.edit_profile, name=&#39;edit_profile&#39;)  Next to create the edit_profile view in the views.</description>
    </item>
    
    <item>
      <title>Web701 15</title>
      <link>https://oglinuk.github.io/post/web701-15/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-15/</guid>
      <description>Web Development 701 ~ Profile In the previous blog we implemented the registration functionality. Now to add additional fields when registering and a profile page for users. In this blog we are going to explore extending the user model. The first thing we need to do is to create a new class in the models.py file in our authentication app. To this file we are going to add the following code.</description>
    </item>
    
    <item>
      <title>Web701 14</title>
      <link>https://oglinuk.github.io/post/web701-14/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-14/</guid>
      <description>Web Development 701 ~ Registration In the previous blog we covered the basic implementation of authentication using the built-in authentication system of Django. In this blog we are going to cover how to handle user registration. The first thing to do is to add the following line to the urls.py file under our authentication app.
path(&#39;register&#39;, views.register, name=&#39;register&#39;)  Now to create the corresponding view in the views.py file.</description>
    </item>
    
    <item>
      <title>Web701 13</title>
      <link>https://oglinuk.github.io/post/web701-13/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-13/</guid>
      <description>Web Development 701 ~ Authentication In this blog post we are going to cover the implementation of user authentication. First thing to do is to create a new app via python3 manage.py startapp authentication. Next we need to run python3 manage.py migrate. Then we need to create a super user via python3 manage.py createsuperuser. Now we need to add authentication to the INSTALLED_APPS list in the settings.py file. Once that is done we can start to add the authentication functionality.</description>
    </item>
    
    <item>
      <title>Web701 12</title>
      <link>https://oglinuk.github.io/post/web701-12/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-12/</guid>
      <description>Web Development 701 ~ Assessment 2 Milestone 3 Since I have completed milestone&amp;rsquo;s 1 and 2 for assessment 2 of web701, I am going to start milestone 3 (building the proposed website). I have chosen to use Django since Django is more suitable for a production environment than Flask. Originally I was going to use Django-cms, but quickly found that it would not be as easy to implement some of the features required for the milestone.</description>
    </item>
    
    <item>
      <title>Web701 11</title>
      <link>https://oglinuk.github.io/post/web701-11/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-11/</guid>
      <description>Web Development 701 ~ OpenFaas ~ Lab 4 In this blog we are going to go through lab 4 which goes into more depth around functions.
The first part of the lab covers configuration injection with environment variables. There are two ways of doing so; at deployment time and using query string and HTTP headers. Environment variables at deployment time are covered in lab 3 when working with write_debug, which is where the environment variable is added to the YAML file.</description>
    </item>
    
    <item>
      <title>Web701 10</title>
      <link>https://oglinuk.github.io/post/web701-10/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-10/</guid>
      <description>Web Development 701 ~ OpenFaas Continued ~ Lab 3 In this blog we are going to explore the OpenFaas workshop. Since we already have OpenFaas deployed and running from the previous blog, we are going to skip to lab 3; introduction to functions. OpenFaas provides two ways of creating a new function; using a template, or using an existing binary. I dont have a binary to use, so I am going to be using a template.</description>
    </item>
    
    <item>
      <title>Web701 9</title>
      <link>https://oglinuk.github.io/post/web701-9/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-9/</guid>
      <description>Web Development 701 ~ OpenFaas As stated in the previous blog, the first exposure to serverless was OpenFaaS. Whether its because of bias of the first exposure or because of bias towards docker, I am going to be exploring OpenFaaS for the serverless implementation of assessment three. First thing to do like anything is to head to the documentation section. &amp;ldquo;OpenFaaS (Functions as a Service) is a framework for building serverless functions with Docker and Kubernetes which has first class support for metrics.</description>
    </item>
    
    <item>
      <title>Web701 8</title>
      <link>https://oglinuk.github.io/post/web701-8/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-8/</guid>
      <description>Web Development 701 ~ Serverless For the third assessment we are to choose a web technology to research and implement. It has to be web related, so one of the things that came up when discussing with my tutor was exploring serverless architectures. I have been exposed to serverless before when I was browsing through /r/opensource and came across OpenFaaS. Before we dive any deeper lets come to an understanding of what we really mean when we are talking about serverless.</description>
    </item>
    
    <item>
      <title>Web701 7</title>
      <link>https://oglinuk.github.io/post/web701-7/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-7/</guid>
      <description>Web Development 701 ~ Web Hosting This blog is going to cover web hosting, to make the website publicly available to the outside world. I don&amp;rsquo;t really know much about web hosting, nor do I care to go into much detail since this is something that a web developer needs to know. As I stated in the web security blog, I have little interest in web development. That being said hosting the website is something that our tutor wants us to get some experience with so here I am writing a blog about it.</description>
    </item>
    
    <item>
      <title>Web701 6</title>
      <link>https://oglinuk.github.io/post/web701-6/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-6/</guid>
      <description>Web Development 701 ~ Django-cms, Wagtail &amp;amp; Odoo Last blog I didn&amp;rsquo;t really go into much detail around getting the Django based CMSs or Odoo installed/running. This blog is going to cover those in more detail. To recap, as stated in the previous blog, I have no experience with Django but do have some with Odoo. The reason I am working with Django and not the framework I&amp;rsquo;ve been using (Flask) is because Django is a fullstack framwork, where Flask is only a microframework.</description>
    </item>
    
    <item>
      <title>Web701 5</title>
      <link>https://oglinuk.github.io/post/web701-5/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-5/</guid>
      <description>Web Development 701 ~ Virtual Machines and Docker Class was mainly reviewing the mock projects, so this blog is going to be dedicated to the virtual machines that I use on virtualbox. For the second milestone we have to describe three frameworks, two of which were prompted in class; laravel (PHP), and meteor (NodeJS). Its times like these that I am thankful for virtual machines. Im not sure how difficult these were to install and get running on windows machines and I dont care to.</description>
    </item>
    
    <item>
      <title>Web701 4</title>
      <link>https://oglinuk.github.io/post/web701-4/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-4/</guid>
      <description>Web Development 701 ~ S(ecure) SH(ell) Today in Web701 we learned about SSH so that we can access a remote server for hosting out web technologies on. I have had experience with SSH before since that is how I connect to my raspberry pi&amp;rsquo;s and my onion omega, though I prefer the terminal SSH cli to a GUI like putty. Yet another advantage of Linux is that distributions come with SSH pre-installed.</description>
    </item>
    
    <item>
      <title>Web701 3</title>
      <link>https://oglinuk.github.io/post/web701-3/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-3/</guid>
      <description>Web Development 701 ~ Security Though web development is not a main focus (or at least front end), I don&amp;rsquo;t spend much time investigating many web technologies/concepts. That being said computer security is a general topic that interests me, and learning the subset internet security is something that one should know. Internet security involves WWW (world wide web), browser, and networking security. Since the internet is insecure, internet securities &amp;ldquo;objective is to establish rules and measures to use against attacks over the Internet.</description>
    </item>
    
    <item>
      <title>Web701 2</title>
      <link>https://oglinuk.github.io/post/web701-2/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-2/</guid>
      <description>Web Development 701 ~ Comparison of frameworks and CMS Todays class covers a comparison of frameworks and CMS. The tutor gave access to an online document with the following questions. We split up into groups, so I will review the answers my group (Bryce, Finn, Deja, and myself).
What is a CMS? A platform that allows non-developers to manage the content of a website
How many are there? Over 9000</description>
    </item>
    
    <item>
      <title>Web701 1</title>
      <link>https://oglinuk.github.io/post/web701-1/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-1/</guid>
      <description>Web Development 701 ~ Frameworks and VirtualBox Today in web701 we covered the frameworks and softwares that are going to be used for the assessment. The frameworks are laravel (an open-source PHP web framework) and meteor (an open-source NodeJS web framework). The softwares are XAMPP (an open-source web server) and composer (a dependancy manager for PHP). I am going to be installing these on a ubuntu virtual machine, so the first thing I need to do is install virtualbox on my manjaro partition.</description>
    </item>
    
    <item>
      <title>Web701 0</title>
      <link>https://oglinuk.github.io/post/web701-0/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oglinuk.github.io/post/web701-0/</guid>
      <description>Web Development 701 Web development is a required class for my major (software development) in the bachelor of IT. The 701 class is based around information architecture, CMS (content management systems), frameworks and website security. A CMS is essentially a platform which allows a user to change the website without touching any code, usually the form of drag and drops. I don&amp;rsquo;t program using PHP at all, and don&amp;rsquo;t really have any interest in web development so I am going to see if I can use Odoo, since it has a website module that is a CMS.</description>
    </item>
    
  </channel>
</rss>